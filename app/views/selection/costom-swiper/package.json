{
  "_args": [
    [
      {
        "raw": "react-native-deck-swiper",
        "scope": null,
        "escapedName": "react-native-deck-swiper",
        "name": "react-native-deck-swiper",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\AwesomeProject"
    ]
  ],
  "_from": "react-native-deck-swiper@latest",
  "_id": "react-native-deck-swiper@1.4.9",
  "_inCache": true,
  "_location": "/react-native-deck-swiper",
  "_nodeVersion": "8.9.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-native-deck-swiper_1.4.9_1521347473494_0.7167732511485332"
  },
  "_npmUser": {
    "name": "alexbrillant",
    "email": "abrillant23@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {
    "fbjs": "0.8.16",
    "loose-envify": "1.3.1"
  },
  "_requested": {
    "raw": "react-native-deck-swiper",
    "scope": null,
    "escapedName": "react-native-deck-swiper",
    "name": "react-native-deck-swiper",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-native-deck-swiper/-/react-native-deck-swiper-1.4.9.tgz",
  "_shasum": "f52e339ca1f67554fc23c7a288fa77e648374ba1",
  "_shrinkwrap": null,
  "_spec": "react-native-deck-swiper",
  "_where": "D:\\AwesomeProject",
  "author": {
    "name": "Alexandre Brillant"
  },
  "bugs": {
    "url": "https://github.com/alexbrillant/react-native-deck-swiper/issues"
  },
  "dependencies": {
    "prop-types": "15.5.10"
  },
  "description": "Awesome tinder like card swiper for react-native. Highly Customizable!",
  "devDependencies": {
    "babel-eslint": "^7.2.3",
    "babel-jest": "18.0.0",
    "babel-preset-react-native": "1.9.1",
    "eslint": "^3.19.0",
    "eslint-config-standard": "^10.2.1",
    "eslint-config-standard-react": "^5.0.0",
    "eslint-plugin-import": "^2.7.0",
    "eslint-plugin-json": "^1.2.0",
    "eslint-plugin-node": "^5.1.1",
    "eslint-plugin-promise": "^3.5.0",
    "eslint-plugin-react": "^7.2.1",
    "eslint-plugin-standard": "^3.0.1",
    "jest": "18.1.0",
    "jest-cli": "^18.1.0",
    "lodash": "^4.17.5",
    "prettier-eslint": "^6.4.2",
    "prettier-eslint-cli": "^4.1.1",
    "react-test-renderer": "15.4.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-efx0I12+jWyngRfgORPS6hc4VSZ7k+rvGEvv3DpEwrN1yQIbR67W1EgoIzGwWzwgkmvstrrqioyR1/XWjSE2HQ==",
    "shasum": "f52e339ca1f67554fc23c7a288fa77e648374ba1",
    "tarball": "https://registry.npmjs.org/react-native-deck-swiper/-/react-native-deck-swiper-1.4.9.tgz",
    "fileCount": 19,
    "unpackedSize": 1877482
  },
  "eslintConfig": {
    "parser": "babel-eslint",
    "extends": [
      "standard",
      "standard-react"
    ],
    "parserOptions": {
      "ecmaFeatures": {
        "jsx": true
      }
    }
  },
  "gitHead": "fb640206dbfcf0f10776b76b571e8ae660a87473",
  "homepage": "https://github.com/alexbrillant/react-native-deck-swiper#readme",
  "jest": {
    "preset": "react-native"
  },
  "keywords": [
    "react-native",
    "react-native-component",
    "tinder",
    "cards",
    "card",
    "swipe",
    "swiper",
    "deck",
    "animation"
  ],
  "license": "ISC",
  "main": "index.js",
  "maintainers": [
    {
      "name": "alexbrillant",
      "email": "abrillant23@gmail.com"
    }
  ],
  "name": "react-native-deck-swiper",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^16.0.0-beta.5",
    "react-native": "^0.49.1"
  },
  "readme": "## react-native-deck-swiper\n\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/dwyl/esta/issues)\n[![npm version](https://badge.fury.io/js/react-native-deck-swiper.svg)](https://badge.fury.io/js/react-native-deck-swiper)\n\n## Installation\n\n```\nnpm install react-native-deck-swiper --save\n```\n\n## Overview\n\n* [x] Rotation animation\n* [x] Opacity animation\n* [x] Zoom animation\n* [x] Overlay labels\n* [x] Show next card while swiping\n* [x] Swipe event callbacks\n* [x] Trigger swipe animations programmatically\n* [x] Jump to a card index\n* [x] Swipe to the previous card\n* [x] Underlaying cards offset\n* [ ] Swipe back to the previous card with a custom animation\n\n## Preview\n\n![App preview](/animation.gif)\n![App preview2](/animation2.gif)\n\n## Props\n\n### Card props\n\n| Props           | type           | description                                                          | required | default |\n| :-------------- | :------------- | :------------------------------------------------------------------- | :------- | :------ |\n| cards           | array          | array of data for the cards to be rendered                           | required |\n| renderCard      | func(cardData) | function to render the card based on the data                        | required |\n| cardIndex       | number         | cardIndex to start with                                              |          | 0       |\n| infinite        | bool           | keep swiping indefinitely                                            |          | false   |\n| horizontalSwipe | bool           | enable/disable horizontal swiping                                    |          | true    |\n| verticalSwipe   | bool           | enable/disable vertical swiping                                      |          | true    |\n| showSecondCard  | bool           | enable/disable second card while swiping                             |          | true    |\n| stackSize       | number         | number of underlaying cards to show (showSecondCard must be enabled) |          | 0       |\n\n### Event callbacks\n\n| Props             | type   | description                                                                           | default |\n| :---------------- | :----- | :------------------------------------------------------------------------------------ | :------ |\n| onSwipedAll       | func   | function to be called when all cards have been swiped                                 |         | () => {} |\n| onSwiped          | func   | function to be called when a card is swiped. it receives the swiped card index        |         | (cardIndex) => {} |\n| onSwipedAborted   | func   | function to be called when a card is released before reaching the threshold           |         | () => {} |\n| onSwipedLeft      | func   | function to be called when a card is swiped left. it receives the swiped card index   |         | (cardIndex) => {} |\n| onSwipedRight     | func   | function to be called when a card is swiped right. it receives the swiped card index  |         | (cardIndex) => {} |\n| onSwipedTop       | func   | function to be called when a card is swiped top. it receives the swiped card index    |         | (cardIndex) => {} |\n| onSwipedBottom    | func   | function to be called when a card is swiped bottom. it receives the swiped card index |         | (cardIndex) => {} |\n| onSwiping         | func   | function to be called when a card is being moved. it receives X and Y positions       |         | (x, y) => {} |\n| onTapCard         | func   | function to be called when tapping a card. it receives the tapped card index          |         | (cardIndex) => {} |\n| onTapCardDeadZone | number | maximum amount of movement before a tap is no longer recognized as a tap              | 5       |\n\n### Swipe animation props\n\n| Props                  | type   | description                     | default    |\n| :--------------------- | :----- | :------------------------------ | :--------- |\n| verticalThreshold      | number | vertical swipe threshold        | height / 5 |\n| horizontalThreshold    | number | horizontal swipe threshold      | width / 4  |\n| swipeAnimationDuration | number | duration of the swipe animation | 350        |\n| disableBottomSwipe     | bool   | disable bottom swipe            | false      |\n| disableLeftSwipe       | bool   | disable left swipe              | false      |\n| disableRightSwipe      | bool   | disable right swipe             | false      |\n| disableTopSwipe        | bool   | disable top swipe               | false      |\n\n### Stack props\n\n| Props                  | type   | description                                            | default |\n| :--------------------- | :----- | :----------------------------------------------------- | :------ |\n| stackSeparation        | number | vertical separation between underlaying cards          | 10      |\n| stackScale             | number | percentage to reduce the size of each underlaying card | 3       |\n| stackAnimationFriction | number | spring animation friction (bounciness)                 | 7       |\n| stackAnimationTension  | number | spring animation tension (speed)                       | 40      |\n\n### Rotation animation props\n\n| Props               | type  | description                                            | default                     |\n| :------------------ | :---- | :----------------------------------------------------- | :-------------------------- |\n| inputRotationRange  | array | x values range for the rotation output                 | [-width / 2, 0, width / 2]  |\n| outputRotationRange | array | rotation values for the x values in inputRotationRange | [\"-10deg\", \"0deg\", \"10deg\"] |\n\n### Opacity animation props\n\n| Props                             | type   | description                                                      | default                                               |\n| :-------------------------------- | :----- | :--------------------------------------------------------------- | :---------------------------------------------------- |\n| animateCardOpacity                | bool   | animate card opacity                                             | false                                                 |\n| inputCardOpacityRangeX            | array  | pan x card opacity input range                                   | [-width / 2, -width / 3, 0, width / 3, width / 2]     |\n| outputCardOpacityRangeX           | array  | opacity values for the values in inputCardOpacityRangeX          | [0.8, 1, 1, 1, 0.8]                                   |\n| inputCardOpacityRangeY            | array  | pan y card opacity input range                                   | [-height / 2, -height / 3, 0, height / 3, height / 2] |\n| outputCardOpacityRangeY           | array  | opacity values for the values in inputCardOpacityRangeY          | [0.8, 1, 1, 1, 0.8]                                   |\n| animateOverlayLabelsOpacity       | bool   | animate card overlay labels opacity                              | false                                                 |\n| inputOverlayLabelsOpacityRangeX   | array  | pan x overlay labels opacity input range                         | [-width / 3, -width / 4, 0, width / 4, width / 3]     |\n| outputOverlayLabelsOpacityRangeX  | array  | opacity values for the values in inputOverlayLabelsOpacityRangeX | [1, 0, 0, 0, 1]                                       |\n| inputOverlayLabelsOpacityRangeY   | array  | pan x overlay labels opacity input range                         | [-height / 4, -height / 5, 0, height / 5, height / 4] |\n| outputOverlayLabelsOpacityRangeY  | array  | opacity values for the values in inputOverlayLabelsOpacityRangeY | [1, 0, 0, 0, 1]                                       |\n| overlayOpacityVerticalThreshold   | number | vertical threshold for overlay label                             | height / 5                                            |\n| overlayOpacityHorizontalThreshold | number | horizontal threshold for overlay label                           | width / 4                                             |\n\n2 steps of inputOverlayLabelsOpacityRangeX and inputOverlayLabelsOpacityRangeY should match horizontalThreshold and verticalThreshold, respectively.\n\n### Swipe overlay labels\n\n| Props                    | type   | description                  | default                    |\n| :----------------------- | :----- | :--------------------------- | :------------------------- |\n| overlayLabels            | object | swipe labels title and style | null, see below for format |\n| overlayLabelStyle        | object | swipe labels style           | null, see below for format |\n| overlayLabelWrapperStyle | object | overlay label wrapper style  | see below for default      |\n\n### overlayLabelStyle\n\n```javascript\n{\n  fontSize: 45,\n  fontWeight: 'bold',\n  borderRadius: 10,\n  padding: 10,\n  overflow: 'hidden'\n}\n```\n\n### overlayLabelWrapperStyle default props:\n\n```javascript\n{\n  position: 'absolute',\n  backgroundColor: 'transparent',\n  zIndex: 2,\n  flex: 1,\n  width: '100%',\n  height: '100%'\n}\n```\n\n### overlayLabels default props :\n\n```javascript\n{\n  bottom: {\n\telement: <Text>BLEAH</Text> /* Optional */\n\ttitle: 'BLEAH',\n    style: {\n      label: {\n        backgroundColor: 'black',\n        borderColor: 'black',\n        color: 'white',\n        borderWidth: 1\n      },\n      wrapper: {\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center'\n      }\n    }\n  },\n  left: {\n\telement: <Text>NOPE</Text> /* Optional */\n\ttitle: 'NOPE',\n    style: {\n      label: {\n        backgroundColor: 'black',\n        borderColor: 'black',\n        color: 'white',\n        borderWidth: 1\n      },\n      wrapper: {\n        flexDirection: 'column',\n        alignItems: 'flex-end',\n        justifyContent: 'flex-start',\n        marginTop: 30,\n        marginLeft: -30\n      }\n    }\n  },\n  right: {\n\telement: <Text>LIKE</Text> /* Optional */\n\ttitle: 'LIKE',\n    style: {\n      label: {\n        backgroundColor: 'black',\n        borderColor: 'black',\n        color: 'white',\n        borderWidth: 1\n      },\n      wrapper: {\n        flexDirection: 'column',\n        alignItems: 'flex-start',\n        justifyContent: 'flex-start',\n        marginTop: 30,\n        marginLeft: 30\n      }\n    }\n  },\n  top: {\n\telement: <Text>SUPER</Text> /* Optional */\n\ttitle: 'SUPER LIKE',\n    style: {\n      label: {\n        backgroundColor: 'black',\n        borderColor: 'black',\n        color: 'white',\n        borderWidth: 1\n      },\n      wrapper: {\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center'\n      }\n    }\n  }\n}\n```\n\n### Swipe back to previous card props\n\nMake sure you set showSecondCard={false} for smoother and proper transitions while going back to previous card.\n\n| Props                             | type | description                               | default |\n| :-------------------------------- | :--- | :---------------------------------------- | :------ |\n| goBackToPreviousCardOnSwipeLeft   | bool | previous card is rendered on left swipe   | false   |\n| goBackToPreviousCardOnSwipeRight  | bool | previous card is rendered on right swipe  | false   |\n| goBackToPreviousCardOnSwipeTop    | bool | previous card is rendered on top swipe    | false   |\n| goBackToPreviousCardOnSwipeBottom | bool | previous card is rendered on bottom swipe | false   |\n\n### Style props\n\n| Props                | type   | description                                        | default   |\n| :------------------- | :----- | :------------------------------------------------- | :-------- |\n| backgroundColor      | string | background color for the view containing the cards | '#4FD0E9' |\n| marginTop            | number | marginTop for the swiper container                 | 0         |\n| marginBottom         | number | marginBottom for the swiper container              | 0         |\n| cardVerticalMargin   | number | card vertical margin                               | 60        |\n| cardHorizontalMargin | number | card horizontal margin                             | 20        |\n| childrenOnTop        | bool   | render children on top or not                      | false     |\n| cardStyle            | node   | override swipable card style                       | {}        |\n\n### Methods\n\nTo trigger imperative animations, you can use a reference to the Swiper component.\n\n| Props           | arguments                      | description                   |\n| :-------------- | :----------------------------- | :---------------------------- |\n| swipeLeft       | mustDecrementCardIndex = false | swipe left to the next card   |\n| swipeRight      | mustDecrementCardIndex = false | swipe right to the next card  |\n| swipeTop        | mustDecrementCardIndex = false | swipe top to the next card    |\n| swipeBottom     | mustDecrementCardIndex = false | swipe bottom to the next card |\n| jumpToCardIndex | cardIndex                      | set the current card index    |\n\n## Usage example\n\n```javascript\nrender () {\n    <View style={styles.container}>\n        <Swiper\n            cards={['DO', 'MORE', 'OF', 'WHAT', 'MAKES', 'YOU', 'HAPPY']}\n            renderCard={(card) => {\n                return (\n                    <View style={styles.card}>\n                        <Text style={styles.text}>{card}</Text>\n                    </View>\n                )\n            }}\n            onSwiped={(cardIndex) => {console.log(cardIndex)}}\n            onSwipedAll={() => {console.log('onSwipedAll')}}\n            cardIndex={0}\n            backgroundColor={'#4FD0E9'}\n            stackSize= {3}>\n            <Button\n                onPress={() => {console.log('oulala')}}\n                title=\"Press me\">\n                You can press me\n            </Button>\n        </Swiper>\n    </View>\n}\n```\n\nDemo inside the [Exemples Folder](https://github.com/alexbrillant/react-native-deck-swiper/tree/master/Exemples)\n\n## Stylesheet example\n\n```javascript\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#F5FCFF\"\n  },\n  card: {\n    flex: 1,\n    borderRadius: 4,\n    borderWidth: 2,\n    borderColor: \"#E8E8E8\",\n    justifyContent: \"center\",\n    backgroundColor: \"white\"\n  },\n  text: {\n    textAlign: \"center\",\n    fontSize: 50,\n    backgroundColor: \"transparent\"\n  }\n});\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/alexbrillant/react-native-deck-swiper.git"
  },
  "scripts": {
    "format": "prettier-eslint \"./**/*.js\" --ignore \"./node_modules/**\" --write",
    "lint": "standard --verbose | snazzy",
    "lint:fix": "eslint --fix Swiper.js index.js styles.js",
    "lintdiff": "git diff --name-only --cached --relative | grep '\\.js$' | xargs standard | snazzy",
    "test": "jest --coverage"
  },
  "version": "1.4.9"
}
